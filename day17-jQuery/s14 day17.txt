jQuery
	jQuery支持链式编程.
	http://jquery.cuishifeng.cn/
	
	模块 《=》类库
	DOM/BOM/JavaScript的类库
	
	ps(jQuery版本系列);
	   1.x	(兼容性最好)
  	   2.x
	   3.x	(功能最齐全)
	
	转换：
		jquery对象[0]   => Dom对象
		Dom对象         => $(Dom对象) == jQuery
	
	
	一、查找元素
		DOM：
			在使用DOM来查找HTMl的标签元素时,使用的常用属性大概在10个左右,而且所能找到的的标签元素并不多.
		jQuery：
			选择器，直接找到某个或者某类标签
			1. id
				$('#id')
			2. class
				<div class='c1'></div>
				$(".c1")
			3. 标签
				<div id='i10' class='c1'>
					<a>f</a>
					<a>f</a>
				</div>
				<div class='c1'>
					<a>f</a>
				</div>
				<div class='c1'>
					<div class='c2'> </div>
				</div>
				
				$('a') 	//找到所有a标签
				
			4. 组合a
				<div id='i10' class='c1'>
					<a>f</a>
					<a>f</a>
				</div>
				<div class='c1'>
					<a>f</a>
				</div>
				<div class='c1'>
					<div class='c2'> </div>
				</div>
				
				$('a')
				$('.c2')
				
				$('a,.c2,#i10'）	#组合查找一个或多个标签。
				
			5. 层级
				$('#i10 a') 子子孙孙   //向下多层查找
				$('#i10>a') 儿子	//向下一层查找。
				
			6. 基本
				:first	//第一个标签元素。
				:last	//最后一个标签元素。
				:eq()	//根据索引值找到标签元素。例：$('#i1 a:eq(0)')   //找到id为'i1'的标签下的孩子a标签中的第一个
			7. 属性
				$('[alex]')       具有alex属性的所有标签
				$('[alex="123"]') alex属性等于123的标签
				
			
				<input type='text'/>
				<input type='text'/>
				<input type='file'/>
				<input type='password'/>
				
				$("input[type='text']")
				$(':text')
			
			实例：	
				多选，反选，全选
				- 选择权
				- 
					$('#tb:checkbox').prop('checked');        获取值
					$('#tb:checkbox').prop('checked', true);  设置值
				- 
					jQuery方法内置循环： $('#tb:checkbox').xxxx
					
				- $('#tb:checkbox').each(function(k){
						// k当前索引
						// this，DOM，当前循环的元素 $(this)
						
					})
				- var v = 条件 ? 真值 : 假值  ///三元运算
				
				
			筛选
				
				
				$('#i1').next()		//下一个标签
				$('#i1').nextAll()
				$('#i1').nextUntil('#ii1')
				
				<div>
					<a>asdf</a>
					<a>asdf</a>
					<a id='i1'>asdf</a>
					<a>asdf</a>
					<a id='ii1'>asdf</a>
					<a>asdf</a>
				</div>
				
				$('#i1').prev()		//上一个标签
				$('#i1').prevAll()
				$('#i1').prevUntil('#ii1')
				
				
				$('#i1').parent()	//父标签
				$('#i1').parents()
				$('#i1').parentsUntil()
				
				$('#i1').children()	//子标签
				$('#i1').siblings()	//所有的兄弟标签
				$('#i1').find()		//在所有还在标签中寻找
				$('li:eq(1)')
				$('li').eq(1)
				first()
				last()
				hasClass(class)

		文本操作：
				$(..).text()           # 获取文本内容
				$(..).text(“<a>1</a>”) # 设置文本内容
				
				$(..).html()		//获取文本内容(连标签一起)
				$(..).html("<a>1</a>")	//设置文本内容(连标签一起)
				
				$(..).val()		//具有value属性标签的才能使用
				$(..).val(..)
		样式操作：
				addClass
				removeClass
				toggleClass
				
		属性操作：
				# 专门用于做自定义属性
				$(..).attr('n')		//获取属性值
				$(..).attr('n','v')	//新增或重新设置属性值
				$(..).removeAttr('n')
				
				<input type='checkbox' id='i1'  />
				
				
				# 专门用于chekbox,radio
				$(..).prop('checked')
				$(..).prop('checked', true)
				
				ps:
					<input type='checkbox' id='i1' checked='chceked' />
					要是利用jQuery来完成checked='chceked'这一部分时,在jQuery3.0版本以下的版本可能会出现问题.
					其原因主要是因为版本1.0和2.0使用attr时处理的不彻底.

				PS: 
					index 获取索引位置
					
		文档处理：
				append   //向每个匹配的元素内部（孩子）追加内容。
				prepend  //向每个匹配的元素内部（孩子）前置内容
				after    //在每个匹配的元素之后（兄弟）插入内容。
				before   //在每个匹配的元素之前（兄弟）插入内容。
				
				remove   //从DOM中删除所有匹配的元素。这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。但除了这个元素本身得以保留之外，其他的比如绑定的事件，附加的数据等都会被移除。
				empty	//删除匹配的元素集合中所有的子节点。（包括自身的文本内容）
				
				clone	//克隆匹配的DOM元素并且选中这些克隆的副本
		css处理
			
			$('t1').css('样式名称', '样式值')
			点赞：
				 - $('t1').append()
				 - $('t1').remove()
				 - setInterval
				 - 透明度 1 》 0
				 - position
				 - 字体大小，位置
		位置：
			$(window).scrollTop()  获取
			$(window).scrollTop(0) 设置
			scrollLeft([val])
			
			offset().left                 指定标签在html中的坐标
			offset().top                  指定标签在html中的坐标
			
			position() 	                  指定标签相对父标签(relative)标签的坐标
			<div style='relative'>
				<div>
					<div id='i1' style='position:absolute;height:80px;border:1px'></div>
				</div>
			</div>
			
			
			$('i1').height()           # 获取标签的高度 纯高度
			$('i1').innerHeight()      # 获取边框 + 纯高度 + ？
			$('i1').outerHeight()      # 获取边框 + 纯高度 + ？
			$('i1').outerHeight(true)  # 获取边框 + 纯高度 + ？
			
			# 纯高度，边框，外边距，内边距
			
		事件
			DOM： 三种绑定方式
				jQuery：
					$('.c1').click()
					$('.c1').....
					
					$('.c1').bind('click',function(){
						
					})
					
					$('.c1').unbind('click',function(){
						
					})
					
					*******************
					$('.c').delegate('a', 'click', function(){
					
					}) 	//委托：立即绑定立即执行。
					$('.c').undelegate('a', 'click', function(){
					
					})
					
					$('.c1').on('click', function(){
					
					})
					$('.c1').off('click', function(){
					
					})
					
				当一个标签绑定多个事件，阻止后面默认事件发生（可以用于表单验证）
					return false
					
				# 当页面框架加载完成之后（不需要等页面所有元素完全加载完毕后），自动执行
				$(function(){
					
					$(...)
					
				})
				
		jQuery扩展：
			- $.extend        $.方法
			- $.fn.extend     $(..).方法
			
			(function(){
				var status = 1;
				// 封装变量
			})(jQuery)
			
				
	二、操作元素
	
===》实例：

作业：
	一：
			$('i1').height()           # 获取标签的高度 纯高度
			$('i1').innerHeight()      # 获取边框 + 纯高度 + ？
			$('i1').outerHeight()      # 获取边框 + 纯高度 + ？
			$('i1').outerHeight(true)  # 获取边框 + 纯高度 + ？
			
			# 纯高度，边框，外边距，内边距
			
	二、所有实例敲一遍
	
	三、编辑框
	
	
	
	
	
			
